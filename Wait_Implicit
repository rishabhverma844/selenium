import java.util.concurrent.TimeUnit;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;

public class Wait_Implicit {

	public static void main(String[] args) throws InterruptedException {

		System.setProperty("webdriver.chrome.driver","/home/oye/eclipse-projects/chromedriver");
		WebDriver driver = new ChromeDriver();
		driver.manage().timeouts().implicitlyWait(5, TimeUnit.SECONDS); // Implicit wait is applied globally for each and every line of the test
		driver.get("https://rahulshettyacademy.com/seleniumPractise/#/");
		
		driver.findElement(By.xpath("//div[@class='products']//div[1]//div[3]//button[1]")).click();
		driver.findElement(By.xpath("//a[@class='cart-icon']//img[contains(@class,'')]")).click();
		driver.findElement(By.xpath("//button[contains(text(),'PROCEED TO CHECKOUT')]")).click();
		driver.findElement(By.xpath("//input[@placeholder='Enter promo code']")).sendKeys("rahulshettyacademy");
		driver.findElement(By.xpath("//button[@class='promoBtn']")).click();
		
		System.out.println(driver.findElement(By.xpath("//span[@class='promoInfo']")).getText());
	}
}
/* The Implicit Wait in Selenium is used to tell the web driver to wait for a certain amount of time before it throws a "No Such Element Exception". Once we set the time, the web driver will wait for the element for that time before throwing an exception.

We can declared an implicit wait with the time frame of 5 seconds. It means that if the element is not located on the web page within that time frame, it will throw an exception.
*/
